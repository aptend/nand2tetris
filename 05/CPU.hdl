// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // decode the instruction
    Or(a=instruction[15], b=false, out=cins);
    Not(in=cins, out=ains);
    And(a=instruction[0], b=cins, out=j3);
    And(a=instruction[1], b=cins, out=j2);
    And(a=instruction[2], b=cins, out=j1);
    And(a=instruction[3], b=cins, out=writeM);
    And(a=instruction[4], b=cins, out=dD);
    And(a=instruction[5], b=cins, out=dA); 
    And(a=instruction[6], b=cins, out=c6);
    And(a=instruction[7], b=cins, out=c5);
    And(a=instruction[8], b=cins, out=c4);
    And(a=instruction[9], b=cins, out=c3);
    And(a=instruction[10], b=cins, out=c2);
    And(a=instruction[11], b=cins, out=c1);
    And(a=instruction[12], b=cins, out=a);

    // change content of A according to A- or C-instruction
    Mux16(a[0..14]=instruction[0..14], b=outA, sel=cins, out=toa);
    DRegister(in=outD, load=dD, out=regd); // Data Register
    Or(a=ains, b=dA, out=loadA); // if A-instruction, load A anyway
    ARegister(in=toa, load=loadA, out=rega); // Addressing Register
    Or16(a=rega, b=false, out[0..14]=addressM);
    Or16(a=rega, b=false, out=toPC);
    
    // ALU things
    Mux16(a=rega, b=inM, sel=a, out=mora); // change ALU mode.
    ALU(x=regd, y=mora, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=aluout, zr=zr, ng=ng);
    Or16(a=aluout, b=false, out=outM);
    Or16(a=aluout, b=false, out=outD);
    Or16(a=aluout, b=false, out=outA);

    // PC things
    And3Way(a=j1, b=j2, c=j3, out=janyway);
    Not(in=zr, out=notzr);
    Xor(a=j1, b=j3, out=xorj13);
    Xor(a=j3, b=ng, out=xorngj3);
    And(a=xorj13, b=xorngj3, out=gtltmatch);
    And(a=j1, b=j3, out=andj13);
    Or(a=andj13, b=gtltmatch, out=negtltmatch);
    And(a=notzr, b=negtltmatch, out=nzrmatch);
    And(a=zr, b=j2, out=zrmatch);
    Or(a=zrmatch, b=nzrmatch, out=jmatch);
    Or(a=janyway, b=jmatch, out=jump);
    PC(in=toPC, reset=reset, inc=true, load=jump, out[0..14]=pc);
}
